default rel

global main

section .data

section .bss
temp_buffer: resb 100
temp_buffer_end:
call_stack: resq 500
end_call_stack:

section .text

   

main:
PUSH R12
ENTER 0x20, 0
LEA R12, [call_stack]
CALL func_entry
LEAVE
POP R12
RET
section .bss
temp: resb 100
temp_end:
section .text
func_to_string:
POP RCX
MOV [R12], RCX
ADD R12, 8
LEA RAX, [temp_end]
PUSH RAX
PUSH 1
POP RBX
POP RAX
SUB RAX, RBX
PUSH RAX
; swap:1:0
MOV RAX, [RSP+8]
MOV RBX, [RSP+0]
MOV [RSP+8], RBX
MOV [RSP+0], RAX
MOV RAX, [RSP+0]
PUSH RAX
PUSH 0
POP RBX
POP RCX
XOR RAX, RAX
CMP RBX, RCX
SETL AL
PUSH RAX
POP RAX
CMP RAX, 0
JE endif_0
PUSH 45
POP RAX
POP RBX
MOV [RBX], AL
PUSH -1
POP RBX
POP RAX
MUL RBX
PUSH RAX

endif_0:

while_0:
MOV RAX, [RSP+0]
PUSH RAX
; swap:2:0
MOV RAX, [RSP+16]
MOV RBX, [RSP+0]
MOV [RSP+16], RBX
MOV [RSP+0], RAX
PUSH 10
POP RBX
POP RAX
XOR RDX, RDX
DIV RBX
PUSH RAX
PUSH RDX
PUSH 48
POP RBX
POP RAX
ADD RAX, RBX
PUSH RAX
; swap:2:1
MOV RAX, [RSP+16]
MOV RBX, [RSP+8]
MOV [RSP+16], RBX
MOV [RSP+8], RAX
POP RAX
POP RBX
MOV [RBX], AL
MOV RAX, [RSP+0]
PUSH RAX
PUSH 0
POP RBX
POP RCX
XOR RAX, RAX
CMP RBX, RCX
SETNE AL
PUSH RAX
POP RAX
CMP RAX, 0
JE endwhile_0
; swap:1:0
MOV RAX, [RSP+8]
MOV RBX, [RSP+0]
MOV [RSP+8], RBX
MOV [RSP+0], RAX
PUSH 1
POP RBX
POP RAX
SUB RAX, RBX
PUSH RAX
JMP while_0

endwhile_0:
POP RAX
LEA RAX, [temp_end]
PUSH RAX
MOV RAX, [RSP+8]
PUSH RAX
POP RBX
POP RAX
SUB RAX, RBX
PUSH RAX
SUB R12, 8
MOV RCX, [R12]
PUSH RCX
RET
func_uint_to_string:
POP RCX
MOV [R12], RCX
ADD R12, 8
LEA RAX, [temp_end]
PUSH RAX
PUSH 1
POP RBX
POP RAX
SUB RAX, RBX
PUSH RAX

while_1:
MOV RAX, [RSP+0]
PUSH RAX
; swap:2:0
MOV RAX, [RSP+16]
MOV RBX, [RSP+0]
MOV [RSP+16], RBX
MOV [RSP+0], RAX
PUSH 10
POP RBX
POP RAX
XOR RDX, RDX
DIV RBX
PUSH RAX
PUSH RDX
PUSH 48
POP RBX
POP RAX
ADD RAX, RBX
PUSH RAX
; swap:2:1
MOV RAX, [RSP+16]
MOV RBX, [RSP+8]
MOV [RSP+16], RBX
MOV [RSP+8], RAX
POP RAX
POP RBX
MOV [RBX], AL
MOV RAX, [RSP+0]
PUSH RAX
PUSH 0
POP RBX
POP RCX
XOR RAX, RAX
CMP RBX, RCX
SETNE AL
PUSH RAX
POP RAX
CMP RAX, 0
JE endwhile_1
; swap:1:0
MOV RAX, [RSP+8]
MOV RBX, [RSP+0]
MOV [RSP+8], RBX
MOV [RSP+0], RAX
PUSH 1
POP RBX
POP RAX
SUB RAX, RBX
PUSH RAX
JMP while_1

endwhile_1:
POP RAX
LEA RAX, [temp_end]
PUSH RAX
MOV RAX, [RSP+8]
PUSH RAX
POP RBX
POP RAX
SUB RAX, RBX
PUSH RAX
SUB R12, 8
MOV RCX, [R12]
PUSH RCX
RET
func_clear:
POP RCX
MOV [R12], RCX
ADD R12, 8
LEA RAX, [string_0]
PUSH RAX
PUSH 13
SUB R12, 8
MOV RCX, [R12]
PUSH RCX
RET
func_print:
POP RCX
MOV [R12], RCX
ADD R12, 8
; swap:1:0
MOV RAX, [RSP+8]
MOV RBX, [RSP+0]
MOV [RSP+8], RBX
MOV [RSP+0], RAX
PUSH 1
PUSH 1
POP RAX
POP RDI
POP RSI
POP RDX
SYSCALL
SUB R12, 8
MOV RCX, [R12]
PUSH RCX
RET
func_printint:
POP RCX
MOV [R12], RCX
ADD R12, 8
CALL func_to_string
CALL func_print
SUB R12, 8
MOV RCX, [R12]
PUSH RCX
RET
func_entry:
POP RCX
MOV [R12], RCX
ADD R12, 8
PUSH 1
CALL func_printint
CALL func_clear
PUSH 123456789
PUSH 7
POP RBX
POP RAX
XOR RDX, RDX
DIV RBX
PUSH RAX
CALL func_printint
LEA RAX, [string_1]
PUSH RAX
PUSH 15
SUB R12, 8
MOV RCX, [R12]
PUSH RCX
RET

section .data
string_0 db 0x3, "[H", 0x3, "[J print", 0xa
string_1 db "Hello", 0xa, 0xd, 0x9, " print", 0xa
